import{s as Cs,i as ws,n as J,o as qs,A as es,B as As}from"./scheduler.3ef1b4ce.js";import{S as fs,i as hs,g as A,s as C,h as F,j as W,c as f,f as t,C as h,k as u,a as o,x as w,m as os,n as ps,o as cs,r as ms,u as vs,v as _s,d as Ds,t as gs,w as xs,H as ns,F as ts}from"./index.051df08a.js";import{M as Ss,g as Es,a as Fs}from"./mdsvex.16346f58.js";function Hs(c){let s,n="project";return{c(){s=A("p"),s.textContent=n,this.h()},l(a){s=F(a,"P",{class:!0,"data-svelte-h":!0}),h(s)!=="svelte-8744ga"&&(s.textContent=n),this.h()},h(){u(s,"class","")},m(a,e){o(a,s,e)},p:J,d(a){a&&t(s)}}}function Ms(c){let s,n;return{c(){s=A("p"),n=os(c[2]),this.h()},l(a){s=F(a,"P",{class:!0});var e=W(s);n=ps(e,c[2]),e.forEach(t),this.h()},h(){u(s,"class","")},m(a,e){o(a,s,e),w(s,n)},p(a,e){e&4&&cs(n,a[2])},d(a){a&&t(s)}}}function Ts(c){let s,n="author";return{c(){s=A("p"),s.textContent=n,this.h()},l(a){s=F(a,"P",{class:!0,"data-svelte-h":!0}),h(s)!=="svelte-1ew71ra"&&(s.textContent=n),this.h()},h(){u(s,"class","text-zinc-500 font-light leading-3")},m(a,e){o(a,s,e)},p:J,d(a){a&&t(s)}}}function Ps(c){let s,n;return{c(){s=A("p"),n=os(c[4]),this.h()},l(a){s=F(a,"P",{class:!0});var e=W(s);n=ps(e,c[4]),e.forEach(t),this.h()},h(){u(s,"class","text-zinc-500 font-light leading-3")},m(a,e){o(a,s,e),w(s,n)},p(a,e){e&16&&cs(n,a[4])},d(a){a&&t(s)}}}function Ls(c){let s,n="0";return{c(){s=A("p"),s.textContent=n,this.h()},l(a){s=F(a,"P",{class:!0,"data-svelte-h":!0}),h(s)!=="svelte-fe3zrm"&&(s.textContent=n),this.h()},h(){u(s,"class","flex-none px-2")},m(a,e){o(a,s,e)},p:J,d(a){a&&t(s)}}}function js(c){let s,n;return{c(){s=A("p"),n=os(c[1]),this.h()},l(a){s=F(a,"P",{class:!0});var e=W(s);n=ps(e,c[1]),e.forEach(t),this.h()},h(){u(s,"class","flex-none px-2")},m(a,e){o(a,s,e),w(s,n)},p(a,e){e&2&&cs(n,a[1])},d(a){a&&t(s)}}}function $s(c){let s,n,a,e,i,B,g,E,d,x,y,H="⭐",$,T;function q(r,D){return r[2]?Ms:Hs}let z=q(c),m=z(c);function S(r,D){return r[4]?Ps:Ts}let G=S(c),v=G(c);function M(r,D){return r[1]?js:Ls}let R=M(c),_=R(c);return{c(){s=A("a"),n=A("div"),a=A("img"),i=C(),B=A("div"),m.c(),g=C(),v.c(),E=C(),d=A("div"),_.c(),x=C(),y=A("p"),y.textContent=H,this.h()},l(r){s=F(r,"A",{class:!0,href:!0,target:!0});var D=W(s);n=F(D,"DIV",{class:!0});var k=W(n);a=F(k,"IMG",{src:!0,alt:!0,width:!0,height:!0,class:!0}),i=f(k),B=F(k,"DIV",{class:!0});var b=W(B);m.l(b),g=f(b),v.l(b),b.forEach(t),E=f(k),d=F(k,"DIV",{class:!0});var I=W(d);_.l(I),x=f(I),y=F(I,"P",{class:!0,"data-svelte-h":!0}),h(y)!=="svelte-1jj1pfi"&&(y.textContent=H),I.forEach(t),k.forEach(t),D.forEach(t),this.h()},h(){ws(a.src,e=zs)||u(a,"src",e),u(a,"alt","github logo"),u(a,"width",42),u(a,"height",42),u(a,"class","flex-none rounded-full"),u(B,"class","flex-grow mx-3"),u(y,"class","leading-3 text-center"),u(d,"class","bg-zinc-700"),u(n,"class",$=c[5](c[3])),u(s,"class","flex my-10 mx-2"),u(s,"href",T="https://github.com/"+c[0]),u(s,"target","_blank")},m(r,D){o(r,s,D),w(s,n),w(n,a),w(n,i),w(n,B),m.m(B,null),w(B,g),v.m(B,null),w(n,E),w(n,d),_.m(d,null),w(d,x),w(d,y)},p(r,[D]){z===(z=q(r))&&m?m.p(r,D):(m.d(1),m=z(r),m&&(m.c(),m.m(B,g))),G===(G=S(r))&&v?v.p(r,D):(v.d(1),v=G(r),v&&(v.c(),v.m(B,null))),R===(R=M(r))&&_?_.p(r,D):(_.d(1),_=R(r),_&&(_.c(),_.m(d,x))),D&8&&$!==($=r[5](r[3]))&&u(n,"class",$),D&1&&T!==(T="https://github.com/"+r[0])&&u(s,"href",T)},i:J,o:J,d(r){r&&t(s),m.d(),v.d(),_.d()}}}const zs="/github_white.png";function Gs(c,s,n){let{repo:a}=s,e,i,B,g;const E=async()=>{const y=await(await fetch(`https://api.github.com/repos/${a}`)).json();n(1,e=y.stargazers_count),n(3,B=y.language),n(2,i=y.name),n(4,g=y.owner.login)},d=x=>{let y="flex bg-zinc-950 border-b-4 ";switch(x){case"Go":return y+="border-[#00add8]";case"JavaScript":return y+="border-[#f1e05a]";case"TypeScript":return y+="border-[#3178c6]";case"Svelte":return y+="border-[#ff3e00]";case"HTML":return y+="border-[#e34c26]";case"Python":return y+="border-[#3572a5]";case"PHP":return y+="border-[#4f5d95]";case"V":return y+="border-[#4f87c4]";case"":return y+="border-[]";default:return y}};return qs(async()=>{await E()}),c.$$set=x=>{"repo"in x&&n(0,a=x.repo)},[a,e,i,B,g,d]}class Rs extends fs{constructor(s){super(),hs(this,s,Gs,$s,Cs,{repo:0})}}function Is(c){let s,n,a,e="Table of Content",i,B,g='<li><p><a href="#gosvelt">GoSvelt</a></p> <ul><li><p><a href="#why-gosvelt-">why gosvelt ?</a></p> <ul><li><a href="#fullstack-integration-of-svelte">fullstack integration of svelte</a></li> <li><a href="#cool-way-to-made-sse">cool way to made sse</a></li> <li><a href="#pretty-simple-syntax">pretty simple syntax</a></li></ul></li> <li><p><a href="#todo">todo</a></p></li></ul></li>',E,d,x="GoSvelt",y,H,$=`the <code>fasthttp</code> <code>fullstack</code> golang framwork using <code>svelte</code> (support tailwindcss).
just more 10 time faster than <code>sveltekit</code>`,T,q,z="why gosvelt ?",m,S,G="fullstack integration of svelte",v,M,R=`yeah, gosvelt will compile, group, and serve svelte pages.<br/>
A Svelte or AdvancedSvelte handler will give you a <strong>svelte map</strong> wich contain “js” and “css” URLs and you can add to this map your own attributes that will be rendered on the html template (note: if you add for example a “test” element to the map, you have to add the <code>&amp;{test}</code> element in the html template)`,_,r,D=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">func</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">r</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> gosvelt.</span><span style="color: #56B6C2">New</span><span style="color: #ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Svelte</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./static/App.svelte&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gosvelt.Context, svelte gosvelt.Map) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Html</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">200</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./static/index.html&quot;</span><span style="color: #ABB2BF">, svelte) </span><span style="color: #7F848E; font-style: italic">// html template</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">AdvancedSvelte</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/adv&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./static/&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;App.svelte&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gosvelt.Context, svelte gosvelt.Map) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Html</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">200</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./static/index.html&quot;</span><span style="color: #ABB2BF">, svelte) </span><span style="color: #7F848E; font-style: italic">// html template</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	&#125;, gs.SvelteConfig&#123;</span></span>
<span class="line"><span style="color: #ABB2BF">		Typescript:  </span><span style="color: #D19A66">false</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">		Tailwindcss: </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">		Pnpm:        </span><span style="color: #D19A66">true</span><span style="color: #ABB2BF">,</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Start</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;:80&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,k,b,I="cool way to made sse",X,N,rs="there are actyally two way to use sse in gosvelt: the <strong>context</strong> way wich is in a context and can use channels declared in the handler. And the <strong>handler</strong> way wich is an handler function and use channels who are declared outside the handler.",Y,U,bs=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">func</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">r</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> gosvelt.</span><span style="color: #56B6C2">New</span><span style="color: #ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/sse&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gs.Context) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123; </span><span style="color: #7F848E; font-style: italic">// context way</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">datach</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">make</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">chan</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">interface</span><span style="color: #ABB2BF">&#123;&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #E06C75">closech</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">make</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">chan</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">struct</span><span style="color: #ABB2BF">&#123;&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Sse</span><span style="color: #ABB2BF">(datach, closech, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">			datach </span><span style="color: #56B6C2">&lt;-</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">i</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #56B6C2">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">10</span><span style="color: #ABB2BF">; i</span><span style="color: #56B6C2">++</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">				time.</span><span style="color: #56B6C2">Sleep</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">100</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF"> time.Millisecond)</span></span>
<span class="line"><span style="color: #ABB2BF">				datach </span><span style="color: #56B6C2">&lt;-</span><span style="color: #ABB2BF"> fmt.</span><span style="color: #56B6C2">Sprintf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;</span><span style="color: #D19A66">%d</span><span style="color: #98C379"> -&gt; actual time is </span><span style="color: #D19A66">%v</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">, i, time.</span><span style="color: #56B6C2">Now</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">			&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">			</span><span style="color: #56B6C2">close</span><span style="color: #ABB2BF">(closech)</span></span>
<span class="line"><span style="color: #ABB2BF">		&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">datach</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">make</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">chan</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">interface</span><span style="color: #ABB2BF">&#123;&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">closech</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #56B6C2">make</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">chan</span><span style="color: #ABB2BF"> </span><span style="color: #C678DD">struct</span><span style="color: #ABB2BF">&#123;&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Sse</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/sse2&quot;</span><span style="color: #ABB2BF">, datach, closech, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">() &#123; </span><span style="color: #7F848E; font-style: italic">// handler way</span></span>
<span class="line"><span style="color: #ABB2BF">		datach </span><span style="color: #56B6C2">&lt;-</span><span style="color: #ABB2BF"> </span><span style="color: #98C379">&quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">for</span><span style="color: #ABB2BF"> </span><span style="color: #E06C75">i</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">0</span><span style="color: #ABB2BF">; i </span><span style="color: #56B6C2">&lt;</span><span style="color: #ABB2BF"> </span><span style="color: #D19A66">4</span><span style="color: #ABB2BF">; i</span><span style="color: #56B6C2">++</span><span style="color: #ABB2BF"> &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">			time.</span><span style="color: #56B6C2">Sleep</span><span style="color: #ABB2BF">(time.Second)</span></span>
<span class="line"><span style="color: #ABB2BF">			datach </span><span style="color: #56B6C2">&lt;-</span><span style="color: #ABB2BF"> fmt.</span><span style="color: #56B6C2">Sprintf</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;</span><span style="color: #D19A66">%d</span><span style="color: #98C379"> -&gt; actual time is </span><span style="color: #D19A66">%v</span><span style="color: #98C379">&quot;</span><span style="color: #ABB2BF">, i, time.</span><span style="color: #56B6C2">Now</span><span style="color: #ABB2BF">())</span></span>
<span class="line"><span style="color: #ABB2BF">		&#125;</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #56B6C2">close</span><span style="color: #ABB2BF">(closech)</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Start</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;:80&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,O,P,Bs="pretty simple syntax",Z,V,is="the syntax is like popular framworks like fiber, gin, echo",ss,K,ks=`<pre class="shiki one-dark-pro" style="background-color: #282c34" tabindex="0"><code><span class="line"><span style="color: #C678DD">func</span><span style="color: #ABB2BF"> </span><span style="color: #61AFEF">main</span><span style="color: #ABB2BF">() &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #E06C75">r</span><span style="color: #ABB2BF"> </span><span style="color: #E5C07B">:=</span><span style="color: #ABB2BF"> gosvelt.</span><span style="color: #56B6C2">New</span><span style="color: #ABB2BF">()</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/gg/:name&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gosvelt.Context) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123; </span><span style="color: #7F848E; font-style: italic">// url params</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Json</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">200</span><span style="color: #ABB2BF">, gosvelt.Map&#123;</span><span style="color: #98C379">&quot;gg&quot;</span><span style="color: #ABB2BF">: c.</span><span style="color: #56B6C2">Param</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;name&quot;</span><span style="color: #ABB2BF">)&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Get</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/ws&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gosvelt.Context) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123; </span><span style="color: #7F848E; font-style: italic">// websocket handler</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Ws</span><span style="color: #ABB2BF">(</span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(conn </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">websocket.Conn) &#123;</span></span>
<span class="line"><span style="color: #ABB2BF">			conn.</span><span style="color: #56B6C2">WriteJSON</span><span style="color: #ABB2BF">(gosvelt.Map&#123;</span><span style="color: #98C379">&quot;ez&quot;</span><span style="color: #ABB2BF">: </span><span style="color: #98C379">&quot;pz&quot;</span><span style="color: #ABB2BF">&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">		&#125;)</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Static</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/index&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./cmd/static/index.html&quot;</span><span style="color: #ABB2BF">) </span><span style="color: #7F848E; font-style: italic">// static files</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Svelte</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;/&quot;</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./cmd/static/App.svelte&quot;</span><span style="color: #ABB2BF">, </span></span>
<span class="line"><span style="color: #ABB2BF">	</span><span style="color: #C678DD">func</span><span style="color: #ABB2BF">(c </span><span style="color: #C678DD">*</span><span style="color: #ABB2BF">gosvelt.Context, svelte gosvelt.Map) </span><span style="color: #C678DD">error</span><span style="color: #ABB2BF"> &#123; </span><span style="color: #7F848E; font-style: italic">// svelte files</span></span>
<span class="line"><span style="color: #ABB2BF">		</span><span style="color: #C678DD">return</span><span style="color: #ABB2BF"> c.</span><span style="color: #56B6C2">Html</span><span style="color: #ABB2BF">(</span><span style="color: #D19A66">200</span><span style="color: #ABB2BF">, </span><span style="color: #98C379">&quot;./cmd/static/index.html&quot;</span><span style="color: #ABB2BF">, svelte)</span></span>
<span class="line"><span style="color: #ABB2BF">	&#125;)</span></span>
<span class="line"></span>
<span class="line"><span style="color: #ABB2BF">	r.</span><span style="color: #56B6C2">Start</span><span style="color: #ABB2BF">(</span><span style="color: #98C379">&quot;:80&quot;</span><span style="color: #ABB2BF">)</span></span>
<span class="line"><span style="color: #ABB2BF">&#125;</span></span></code></pre>`,Q,L,ys="todo",ls,j,us='<li class="task-list-item"><input type="checkbox" checked="" disabled=""/> <strong>CSR</strong> (Client Side Rendering)</li> <li class="task-list-item"><input type="checkbox" disabled=""/> <strong>SSR</strong> (Server Side Rendering)</li> <li class="task-list-item"><input type="checkbox" disabled=""/> <strong>ISR</strong> (Incremental Static Regeneration)</li> <li class="task-list-item"><input type="checkbox" checked="" disabled=""/> <strong>SSE</strong> (Server Sent Events)</li> <li class="task-list-item"><input type="checkbox" checked="" disabled=""/> <strong>WS</strong> (Web Socket)</li> <li class="task-list-item"><input type="checkbox" checked="" disabled=""/> <strong>CSS Engine</strong> (Tailwindcss)</li> <li class="task-list-item"><input type="checkbox" disabled=""/> Add layout system</li>',as;return s=new Rs({props:{repo:"4lxprime/Gosvelt"}}),{c(){ms(s.$$.fragment),n=C(),a=A("h2"),a.textContent=e,i=C(),B=A("ul"),B.innerHTML=g,E=C(),d=A("h1"),d.textContent=x,y=C(),H=A("p"),H.innerHTML=$,T=C(),q=A("h2"),q.textContent=z,m=C(),S=A("h3"),S.textContent=G,v=C(),M=A("p"),M.innerHTML=R,_=C(),r=new ns(!1),k=C(),b=A("h3"),b.textContent=I,X=C(),N=A("p"),N.innerHTML=rs,Y=C(),U=new ns(!1),O=C(),P=A("h3"),P.textContent=Bs,Z=C(),V=A("p"),V.textContent=is,ss=C(),K=new ns(!1),Q=C(),L=A("h2"),L.textContent=ys,ls=C(),j=A("ul"),j.innerHTML=us,this.h()},l(l){vs(s.$$.fragment,l),n=f(l),a=F(l,"H2",{id:!0,"data-svelte-h":!0}),h(a)!=="svelte-1gd4hm8"&&(a.textContent=e),i=f(l),B=F(l,"UL",{"data-svelte-h":!0}),h(B)!=="svelte-a6o6hz"&&(B.innerHTML=g),E=f(l),d=F(l,"H1",{id:!0,"data-svelte-h":!0}),h(d)!=="svelte-1tql9nw"&&(d.textContent=x),y=f(l),H=F(l,"P",{"data-svelte-h":!0}),h(H)!=="svelte-tjjkj7"&&(H.innerHTML=$),T=f(l),q=F(l,"H2",{id:!0,"data-svelte-h":!0}),h(q)!=="svelte-2fc9uh"&&(q.textContent=z),m=f(l),S=F(l,"H3",{id:!0,"data-svelte-h":!0}),h(S)!=="svelte-pf7ojv"&&(S.textContent=G),v=f(l),M=F(l,"P",{"data-svelte-h":!0}),h(M)!=="svelte-1oex91y"&&(M.innerHTML=R),_=f(l),r=ts(l,!1),k=f(l),b=F(l,"H3",{id:!0,"data-svelte-h":!0}),h(b)!=="svelte-1elz9p6"&&(b.textContent=I),X=f(l),N=F(l,"P",{"data-svelte-h":!0}),h(N)!=="svelte-roh1mw"&&(N.innerHTML=rs),Y=f(l),U=ts(l,!1),O=f(l),P=F(l,"H3",{id:!0,"data-svelte-h":!0}),h(P)!=="svelte-1yveze6"&&(P.textContent=Bs),Z=f(l),V=F(l,"P",{"data-svelte-h":!0}),h(V)!=="svelte-1mbxaqs"&&(V.textContent=is),ss=f(l),K=ts(l,!1),Q=f(l),L=F(l,"H2",{id:!0,"data-svelte-h":!0}),h(L)!=="svelte-13r1o0e"&&(L.textContent=ys),ls=f(l),j=F(l,"UL",{class:!0,"data-svelte-h":!0}),h(j)!=="svelte-1swghrk"&&(j.innerHTML=us),this.h()},h(){u(a,"id","table-of-content"),u(d,"id","gosvelt"),u(q,"id","why-gosvelt-"),u(S,"id","fullstack-integration-of-svelte"),r.a=k,u(b,"id","cool-way-to-made-sse"),U.a=O,u(P,"id","pretty-simple-syntax"),K.a=Q,u(L,"id","todo"),u(j,"class","contains-task-list")},m(l,p){_s(s,l,p),o(l,n,p),o(l,a,p),o(l,i,p),o(l,B,p),o(l,E,p),o(l,d,p),o(l,y,p),o(l,H,p),o(l,T,p),o(l,q,p),o(l,m,p),o(l,S,p),o(l,v,p),o(l,M,p),o(l,_,p),r.m(D,l,p),o(l,k,p),o(l,b,p),o(l,X,p),o(l,N,p),o(l,Y,p),U.m(bs,l,p),o(l,O,p),o(l,P,p),o(l,Z,p),o(l,V,p),o(l,ss,p),K.m(ks,l,p),o(l,Q,p),o(l,L,p),o(l,ls,p),o(l,j,p),as=!0},p:J,i(l){as||(Ds(s.$$.fragment,l),as=!0)},o(l){gs(s.$$.fragment,l),as=!1},d(l){l&&(t(n),t(a),t(i),t(B),t(E),t(d),t(y),t(H),t(T),t(q),t(m),t(S),t(v),t(M),t(_),r.d(),t(k),t(b),t(X),t(N),t(Y),U.d(),t(O),t(P),t(Z),t(V),t(ss),K.d(),t(Q),t(L),t(ls),t(j)),xs(s,l)}}}function Ns(c){let s,n;const a=[c[0],ds];let e={$$slots:{default:[Is]},$$scope:{ctx:c}};for(let i=0;i<a.length;i+=1)e=es(e,a[i]);return s=new Ss({props:e}),{c(){ms(s.$$.fragment)},l(i){vs(s.$$.fragment,i)},m(i,B){_s(s,i,B),n=!0},p(i,[B]){const g=B&1?Es(a,[B&1&&Fs(i[0]),B&0&&Fs(ds)]):{};B&2&&(g.$$scope={dirty:B,ctx:i}),s.$set(g)},i(i){n||(Ds(s.$$.fragment,i),n=!0)},o(i){gs(s.$$.fragment,i),n=!1},d(i){xs(s,i)}}}const ds={title:"gosvelt framwork",description:"what is and how to use gosvelt framwork that can serve svelte pages through golang",author:"4lxprime",author_pp_url:"https://avatars.githubusercontent.com/u/58915711?v=4",date:"2023-08-31",tags:["gosvelt","golang","svelte"],published:!0};function Vs(c,s,n){return c.$$set=a=>{n(0,s=es(es({},s),As(a)))},s=As(s),[s]}class Os extends fs{constructor(s){super(),hs(this,s,Vs,Ns,Cs,{})}}export{Os as default,ds as metadata};
